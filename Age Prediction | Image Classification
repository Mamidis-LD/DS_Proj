{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":78156,"sourceType":"datasetVersion","datasetId":44109}],"dockerImageVersionId":30683,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-18T13:24:11.000469Z","iopub.execute_input":"2024-04-18T13:24:11.000748Z","iopub.status.idle":"2024-04-18T13:26:25.588651Z","shell.execute_reply.started":"2024-04-18T13:24:11.000722Z","shell.execute_reply":"2024-04-18T13:26:25.587694Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import os\nimport PIL\nimport matplotlib.pyplot as plt\nfrom tensorflow import keras\nfrom keras.layers import Dense, Dropout, Embedding, Flatten\nfrom keras.models import Model\nfrom keras.activations import softmax, relu\nfrom keras.optimizers import Adam, SGD,RMSprop\nfrom keras.preprocessing.image import load_img,img_to_array","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:26:25.590239Z","iopub.execute_input":"2024-04-18T13:26:25.590639Z","iopub.status.idle":"2024-04-18T13:26:44.513247Z","shell.execute_reply.started":"2024-04-18T13:26:25.590613Z","shell.execute_reply":"2024-04-18T13:26:44.512357Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"BASE_DIR = '../input/utkface-new/UTKFace'","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:26:44.514437Z","iopub.execute_input":"2024-04-18T13:26:44.515086Z","iopub.status.idle":"2024-04-18T13:26:44.520048Z","shell.execute_reply.started":"2024-04-18T13:26:44.515051Z","shell.execute_reply":"2024-04-18T13:26:44.518828Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tqdm import tqdm\nage = []\nimage_paths = []\nlabels = []\n\nfor filename in tqdm(os.listdir(BASE_DIR)):\n    image_path = os.path.join(BASE_DIR, filename)\n    file = filename.split('_')\n    age1 = int(file[0])\n    label = int(file[1])\n    age.append(age1)\n    labels.append(label)\n    image_paths.append(image_path)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:26:44.522520Z","iopub.execute_input":"2024-04-18T13:26:44.522777Z","iopub.status.idle":"2024-04-18T13:26:44.667576Z","shell.execute_reply.started":"2024-04-18T13:26:44.522755Z","shell.execute_reply":"2024-04-18T13:26:44.666779Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.DataFrame()\ndf['Image_path'],df['Age'], df['Labels'] = image_paths, age, labels\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:26:44.668533Z","iopub.execute_input":"2024-04-18T13:26:44.668776Z","iopub.status.idle":"2024-04-18T13:26:44.722337Z","shell.execute_reply.started":"2024-04-18T13:26:44.668754Z","shell.execute_reply":"2024-04-18T13:26:44.721521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"gender_dict = {0:'Male',1:'Female'}\nplt.figure(figsize=(20,20))\nfiles = df.iloc[0:25]\nfor index, image, age, label in files.itertuples():\n    plt.subplot(5,5,index+1)\n    im = load_img(image)\n    im = np.array(im)\n    plt.imshow(im)\n    plt.title(f\"Age: {age}, Gender: {gender_dict[label]}\",fontsize=14 )\n    plt.axis('off')","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:26:44.723527Z","iopub.execute_input":"2024-04-18T13:26:44.724453Z","iopub.status.idle":"2024-04-18T13:26:48.962073Z","shell.execute_reply.started":"2024-04-18T13:26:44.724427Z","shell.execute_reply":"2024-04-18T13:26:48.960535Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from PIL import Image\ndef ext_features(images):\n    features = []\n    for image in tqdm(images):\n        im = load_img(image,color_mode='grayscale')\n        im = im.resize((128,128),Image.ANTIALIAS)\n        im_array= np.array(im)\n        features.append(im_array)\n    features = np.array(features)\n    features = features.reshape(len(features),128,128,1)\n    return features","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:33:06.696018Z","iopub.execute_input":"2024-04-18T13:33:06.697203Z","iopub.status.idle":"2024-04-18T13:33:06.703005Z","shell.execute_reply.started":"2024-04-18T13:33:06.697158Z","shell.execute_reply":"2024-04-18T13:33:06.702043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X = ext_features(df['Image_path'])","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:33:07.063994Z","iopub.execute_input":"2024-04-18T13:33:07.064337Z","iopub.status.idle":"2024-04-18T13:37:14.762072Z","shell.execute_reply.started":"2024-04-18T13:33:07.064309Z","shell.execute_reply":"2024-04-18T13:37:14.761238Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# X = X/255.0\ndf.columns","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:46:31.073109Z","iopub.execute_input":"2024-04-18T13:46:31.073951Z","iopub.status.idle":"2024-04-18T13:46:31.079423Z","shell.execute_reply.started":"2024-04-18T13:46:31.073921Z","shell.execute_reply":"2024-04-18T13:46:31.078552Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_gender = np.array(df['Labels'])\ny_age = np.array(df['Age'])","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:46:37.606419Z","iopub.execute_input":"2024-04-18T13:46:37.606765Z","iopub.status.idle":"2024-04-18T13:46:37.612129Z","shell.execute_reply.started":"2024-04-18T13:46:37.606739Z","shell.execute_reply":"2024-04-18T13:46:37.611221Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"input_shape = (128,128,1)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:46:52.832994Z","iopub.execute_input":"2024-04-18T13:46:52.833391Z","iopub.status.idle":"2024-04-18T13:46:52.838352Z","shell.execute_reply.started":"2024-04-18T13:46:52.833358Z","shell.execute_reply":"2024-04-18T13:46:52.837248Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.layers import Input, Conv2D,MaxPooling2D, Flatten, Dense, Dropout\nfrom keras.models import Model,Sequential","metadata":{"execution":{"iopub.status.busy":"2024-04-18T13:54:38.284819Z","iopub.execute_input":"2024-04-18T13:54:38.285502Z","iopub.status.idle":"2024-04-18T13:54:38.289835Z","shell.execute_reply.started":"2024-04-18T13:54:38.285469Z","shell.execute_reply":"2024-04-18T13:54:38.288850Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"inputs = Input((input_shape))\nconv_1 = Conv2D(32,kernel_size=(3,3),activation='relu')(inputs)\nmaxp_1 = MaxPooling2D(pool_size=(2,2))(conv_1)\nconv_2 = Conv2D(64,kernel_size=(3,3),activation='relu')(maxp_1)\nmaxp_2 = MaxPooling2D(pool_size=(2,2))(conv_2)\nconv_3 = Conv2D(128,kernel_size=(3,3),activation='relu')(maxp_2)\nmaxp_3 = MaxPooling2D(pool_size=(2,2))(conv_3)\nconv_4 = Conv2D(256,kernel_size=(3,3),activation='relu')(maxp_3)\nmaxp_4 = MaxPooling2D(pool_size=(2,2))(conv_4)\n\nflatten = Flatten()(maxp_4)\n\ndense_1 = Dense(255,activation='relu')(flatten)\ndense_2 = Dense(255,activation='relu')(flatten)\n\ndropout_1 = Dropout(0.4)(dense_1)\ndropout_2 = Dropout(0.4)(dense_2)\n\noutput_1 = Dense(1, activation='sigmoid', name='gender_out') (dropout_1)\noutput_2 = Dense(1, activation='relu', name='age_out') (dropout_2)\n\nmodel= Model(inputs=[inputs],outputs=[output_1,output_2])\nmodel.compile(loss=['binary_crossentropy', 'mae'], optimizer='adam', metrics=['accuracy', 'mae'])","metadata":{"execution":{"iopub.status.busy":"2024-04-18T14:43:20.785735Z","iopub.execute_input":"2024-04-18T14:43:20.786114Z","iopub.status.idle":"2024-04-18T14:43:20.867035Z","shell.execute_reply.started":"2024-04-18T14:43:20.786085Z","shell.execute_reply":"2024-04-18T14:43:20.866226Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.utils import plot_model\nplot_model(model)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T14:43:21.918999Z","iopub.execute_input":"2024-04-18T14:43:21.919371Z","iopub.status.idle":"2024-04-18T14:43:22.070811Z","shell.execute_reply.started":"2024-04-18T14:43:21.919343Z","shell.execute_reply":"2024-04-18T14:43:22.069792Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(x=X, y=[y_gender, y_age], batch_size=32, epochs=30, validation_split=0.2)","metadata":{"execution":{"iopub.status.busy":"2024-04-18T14:43:30.855508Z","iopub.execute_input":"2024-04-18T14:43:30.856254Z","iopub.status.idle":"2024-04-18T14:49:00.346914Z","shell.execute_reply.started":"2024-04-18T14:43:30.856212Z","shell.execute_reply":"2024-04-18T14:49:00.345932Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize=(3,3))\nacc = history.history['gender_out_accuracy']\nval_acc= history.history['val_gender_out_accuracy']\nepochs = range(len(acc))\nplt.plot(epochs, acc, 'b',label = 'Training Accuracy')\nplt.plot(epochs, val_acc, 'r',label = 'Validation Accuracy')\nplt.title('Accuracy Graph')\nplt.legend()\nplt.figure()\n\nplt.figure(figsize=(3,3))\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nplt.plot(epochs, loss, 'b', label='Training Loss')\nplt.plot(epochs, val_loss, 'r', label='Validation Loss')\nplt.title('Loss Graph')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T14:53:09.900637Z","iopub.execute_input":"2024-04-18T14:53:09.901295Z","iopub.status.idle":"2024-04-18T14:53:10.375033Z","shell.execute_reply.started":"2024-04-18T14:53:09.901262Z","shell.execute_reply":"2024-04-18T14:53:10.374108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# plot results for age\nloss = history.history['age_out_mae']\nval_loss = history.history['val_age_out_mae']\nepochs = range(len(loss))\n\nplt.plot(epochs, loss, 'b', label='Training MAE')\nplt.plot(epochs, val_loss, 'r', label='Validation MAE')\nplt.title('Loss Graph')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-18T14:15:09.478274Z","iopub.execute_input":"2024-04-18T14:15:09.478640Z","iopub.status.idle":"2024-04-18T14:15:09.698567Z","shell.execute_reply.started":"2024-04-18T14:15:09.478613Z","shell.execute_reply":"2024-04-18T14:15:09.697588Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_index = 1122\nprint(\"Original Gender :\", gender_dict[y_gender[image_index]],',',\"Original Age:\", y_age[image_index])\npred= model.predict(X[image_index].reshape(1,128,128,1))\npred_age = round(pred[1][0][0])\npred_gender = gender_dict[round(pred[0][0][0])]\nprint(\"Predicted Gender:\", pred_gender, \"Predicted Age:\", pred_age)\nplt.axis('off')\nplt.axis('off')\nplt.imshow(X[image_index].reshape(128, 128), cmap='gray');","metadata":{"execution":{"iopub.status.busy":"2024-04-18T14:55:02.099111Z","iopub.execute_input":"2024-04-18T14:55:02.099987Z","iopub.status.idle":"2024-04-18T14:55:02.351443Z","shell.execute_reply.started":"2024-04-18T14:55:02.099947Z","shell.execute_reply":"2024-04-18T14:55:02.350017Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}